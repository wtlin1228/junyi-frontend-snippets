{
  "junyiReactComponent": {
    "prefix": "jc",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { makeStyles } from '@material-ui/core/styles'",
      "",
      "// utils",
      "",
      "// assets",
      "",
      "// components",
      "",
      "// self-defined-configs",
      "",
      "// self-defined-components",
      "const useStyles = makeStyles(",
      "  (theme) => ({",
      "    root: {",
      "      ",
      "    },",
      "  }),",
      "  { name: '${1:${TM_FILENAME_BASE}}' }",
      ")",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ({}) => {",
      "  const classes = useStyles()",
      "",
      "  return <div className={classes.root} />",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Basic React Component"
  },
  "junyiReactComponentWithRedux": {
    "prefix": "jcr",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "import { connect } from 'react-redux'",
      "import { bindActionCreators } from 'redux'",
      "",
      "// utils",
      "",
      "// assets",
      "",
      "// selectors",
      "",
      "// actions",
      "",
      "// components",
      "import ${1:${TM_FILENAME_BASE}}Component from '../components/${1:${TM_FILENAME_BASE}}'",
      "",
      "// self-defined-configs",
      "",
      "// self-defined-components",
      "const ${1:${TM_FILENAME_BASE}} = ({}) => {",
      "  return <${1:${TM_FILENAME_BASE}}Component />",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "  ",
      "}",
      "",
      "const mapStateToProps = (state) => ({",
      "",
      "})",
      "",
      "const mapDispatchToProps = (dispatch) => bindActionCreators({",
      "",
      "}, dispatch)",
      "",
      "export default connect(",
      "  mapStateToProps,",
      "  mapDispatchToProps",
      ")(${1:${TM_FILENAME_BASE}})",
      ""
    ],
    "description": "Basic React Component with redux"
  },
  "junyiComponentUnitTest": {
    "prefix": "jcut",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import React from 'react'",
      "import userEvent from '@testing-library/user-event'",
      "",
      "// utils",
      "import { render, screen } from '@/tests'",
      "",
      "// components",
      "import ${1:${TM_FILENAME/(.*).test\\..+$/$1/}} from '../${1:${TM_FILENAME/(.*).test\\..+$/$1/}}'",
      "",
      "test('render ${1:${TM_FILENAME/(.*).test\\..+$/$1/}}', () => {",
      "  // Arrange",
      "  const options = {",
      "    initialState: {},",
      "  }",
      "",
      "  render(<${1:${TM_FILENAME/(.*).test\\..+$/$1/}} />, options)",
      "",
      "  // Assert",
      "",
      "  // Alert",
      "",
      "})",
      ""
    ],
    "description": "Unit Test for React Component"
  },
  "junyiComponentUnitTestWithApiMock": {
    "prefix": "jcutapi",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import React from 'react'",
      "import { rest } from 'msw'",
      "import { setupServer } from 'msw/node'",
      "import userEvent from '@testing-library/user-event'",
      "",
      "// utils",
      "import { render, waitFor, screen } from '@/tests'",
      "",
      "// components",
      "import ${1:${TM_FILENAME/(.*).test\\..+$/$1/}} from '../${1:${TM_FILENAME/(.*).test\\..+$/$1/}}'",
      "",
      "// setup",
      "const server = setupServer(",
      "  rest.get('/greeting', (req, res, ctx) => {",
      "    return res(ctx.json({ greeting: 'hello there' }))",
      "  })",
      ")",
      "",
      "beforeAll(() => server.listen())",
      "afterEach(() => server.resetHandlers())",
      "afterAll(() => server.close())",
      "",
      "test('render ${1:${TM_FILENAME/(.*).test\\..+$/$1/}}', () => {",
      "  // Arrange",
      "  const options = {",
      "    initialState: {},",
      "  }",
      "",
      "  render(<${1:${TM_FILENAME/(.*).test\\..+$/$1/}} />, options)",
      "",
      "  // Assert",
      "",
      "  // Alert",
      "})",
      "",
      "test('handlers server error', async () => {",
      "  // Arrange",
      "  server.use(",
      "    // override the initial 'GET /greeting' request handler",
      "    // to return a 500 Server Error",
      "    rest.get('/greeting', (req, res, ctx) => {",
      "      return res(ctx.status(500))",
      "    })",
      "  )",
      "",
      "  const options = {",
      "    initialState: {},",
      "  }",
      "",
      "  render(<${1:${TM_FILENAME/(.*).test\\..+$/$1/}} />, options)",
      "",
      "  // Assert",
      "",
      "  // Alert",
      "})",
      ""
    ],
    "description": "Unit Test for React Component with API mock"
  },
  "junyiReduxSlice": {
    "prefix": "jsl",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import { createSlice, createAction } from '@reduxjs/toolkit'",
      "",
      "const namespace = '${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}'",
      "const initialState = {",
      "  foo: ''",
      "}",
      "",
      "const ${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}Slice = createSlice({",
      "  name: namespace,",
      "  initialState,",
      "  reducers: {",
      "    doSomeThing: (state, action) => {",
      "      const { foo } = action.payload",
      "      state.foo = foo",
      "    },",
      "  },",
      "})",
      "",
      "${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}Slice.asyncActions = {",
      "  doOtherThingAsync: createAction(`\\${namespace}/doOtherThingAsync`),",
      "}",
      "",
      "export const { doSomeThing } = ${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}Slice.actions",
      "",
      "export const { doOtherThingAsync } = ${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}Slice.asyncActions",
      "",
      "export const { reducer } = ${1:${TM_DIRECTORY/.*\\/(.*)\\/redux$/$1/}}Slice",
      ""
    ],
    "description": "Redux Slice"
  },
  "junyiReduxObservableEpic": {
    "prefix": "jep",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      "",
      "import { combineEpics, ofType } from 'redux-observable'",
      "import { of, from } from 'rxjs'",
      "import { map, switchMap, catchError } from 'rxjs/operators'",
      "",
      "import {",
      "  getAsync,",
      "  getSuccess,",
      "  getFailure,",
      "  postAsync,",
      "  postSuccess,",
      "  postFailure,",
      "} from './slice'",
      "",
      "export const postEpic = (action$, state$, { post }) =>",
      "  action$.pipe(",
      "    ofType(postAsync.type),",
      "    switchMap(() =>",
      "      from(post('/api/foo', { foo: 'bar' })).pipe(",
      "        map((response) => postSuccess(response)),",
      "        catchError((error) => of(postFailure(error)))",
      "      )",
      "    )",
      "  )",
      "",
      "export const getEpic = (action$, state$, { get }) =>",
      "  action$.pipe(",
      "    ofType(getAsync.type),",
      "    switchMap(() =>",
      "      from(get('/api/foo', { foo: 'bar' })).pipe(",
      "        map((response) => getSuccess(response.data)),",
      "        catchError((error) => of(getFailure(error)))",
      "      )",
      "    )",
      "  )",
      "",
      "export default combineEpics(postEpic, getEpic)",
      ""
    ],
    "description": "Redux Observable Epic"
  },
  "junyiStyledComponent": {
    "prefix": "jsc",
    "body": [
      "const ${1:StyledDiv} = styled(({ ${3:foo}: _${3:foo}, ...other }) => <${2:div} {...other} />)(",
      "  ({ ${3:foo} }) => ({",
      "",
      "  }),",
      "  { name: ${1:StyledDiv} }",
      ")"
    ],
    "description": "Material styled Component with consuming props pattern"
  },
  "junyiCopyrightAndLicense": {
    "prefix": "jcl",
    "body": [
      "/**",
      "* Copyright (c) 2020 Junyi Academy.",
      "*",
      "* This source code is licensed under the MIT license found in the",
      "* LICENSE file in the root directory of this source tree.",
      "*/",
      ""
    ],
    "description": "Copyright and License"
  }
}
